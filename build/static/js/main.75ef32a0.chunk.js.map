{"version":3,"sources":["utils/helpers.js","api/axios.instance.js","pages/Login.js","services/auth.service.js","layout/Style.js","api/user.js","utils/mockApiHelper.js","data.js","components/Dialog.js","components/InputPage.js","services/sales.service.js","services/user.service.js","components/Table.js","components/Chart.js","components/StatTable.js","components/OutputPage.js","components/Main.js","services/country.service.js","pages/Dashboard.js","reportWebVitals.js","layout/Header.js","layout/index.js","index.js"],"names":["sortSaleData","saleData","sortByKey","sort","saleDataA","saleDataB","dateA","Date","dateB","isBefore","Number","getMostRevenueEarningProduct","maximumRevenueEarningProduct","name","revenue","revenuePerProduct","forEach","item","hasOwnProperty","product","getMostSoldProduct","mostSoldProduct","count","sellCountPerProduct","sales_number","getAverageSale","reduce","curr","length","getMostExpensiveProduct","prev","index","prevRev","currRev","isValidName","splittedName","split","filter","isValidEmail","email","test","String","toLowerCase","instance","axios","create","headers","xsrfHeaderName","xsrfCookieName","setAuthToken","token","defaults","common","useStyles","makeStyles","theme","container","padding","spacing","LoginPage","setToken","setCurrentUserId","classes","useState","setEmail","password","setPassword","hasError","setHasError","Container","className","maxWidth","Grid","xs","TextField","error","helperText","fullWidth","label","size","variant","value","onChange","e","target","type","Button","color","onClick","data","preventDefault","post","then","response","status","authToken","currentUserId","user_id","toast","localStorage","setItem","catch","toString","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","mixins","appBar","zIndex","drawer","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","height","overflow","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","formControl","margin","minWidth","selectEmpty","marginTop","control","id","saveUserInformation","userInformation","JSON","stringify","userId","getItem","saveSalesData","salesData","getSalesData","salesDataStr","console","log","parse","genders","chartFilters","sortKeys","AlertDialog","props","Dialog","open","openDialog","onClose","handleCloseDialog","aria-labelledby","aria-describedby","DialogContent","DialogContentText","DialogActions","handleAccept","autoFocus","InputPage","setShowoutput","setcsvData","setUserInformation","countryList","dashboardContext","React","useContext","DashboardContext","mainContext","MainContext","logoutProcess","setName","age","setAge","gender","setGender","city","setCity","country","setCountry","file","setFile","rawData","setRawData","setOpenDialog","hasUpdatedUserInformation","setHasUpdatedUserInformation","useEffect","Object","keys","constructor","first_name","last_name","cities","uploadBtnEnabled","updateData","csv","Papa","unparse","handleCSVUpload","endsWith","complete","onShowOutPut","shift","sales_data","processedData","toISOString","row","push","date","preProcessData","createSalesRecordService","success","style","textAlign","Typography","event","FormControl","InputLabel","Select","labelId","map","MenuItem","selected","charAt","toUpperCase","slice","FormHelperText","Array","elementInArray","disabled","undefined","nameArray","updateUserData","currentValue","patch","files","accept","float","multiline","rows","rowsMax","InputLabelProps","shrink","Output","columns","field","headerName","pageSize","checkboxSelection","Chart","state","labels","datasets","yAxisLabel","backgroundColor","borderColor","borderWidth","options","text","fontSize","legend","StatTable","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","currentUserName","avgSaleCurrentUser","avgSale","mostExpensiveProduct","mostRevenueEarningProduct","OutputPage","handleReset","aggregatedData","setAggregatedData","csvData","chartFilter","setChartFilter","orderBy","setOrderBy","getAggregatedData","get","salesStatistics","parsedData","average_sales_for_current_user","average_sale_all_user","product_highest_revenue_for_current_user","product_name","price","highest_revenue_sale_for_current_user","sale_id","product_highest_sales_number_for_current_user","getCsvData","fontWeight","lg","createContext","Main","onLogout","context","setSalesData","setCountryList","showOutput","userInformationIsNotBlankObject","salesDataIsNotEmpty","Provider","createServer","models","user","Model","sale","extend","belongsTo","userinformation","seeds","server","userData","routes","this","schema","request","payLoad","requestBody","db","userinformations","insert","all","find","params","sales","currentUserSalesData","passthrough","Dashboard","removeItem","Login","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Header","AppBar","clsx","Toolbar","noWrap","Layout","CssBaseline","children","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75ef32a0.chunk.js","sourcesContent":["import { isBefore } from \"date-fns\";\n\n/**\n * Preprocessing the csv data to add key attribute for each item in each row of the sales data.\n * @param {array} salesData\n */\nexport const preProcessData = (salesData) => {\n  console.log(\"preProcessData salesData\", salesData);\n  const processedData = [];\n  const d = new Date();\n  const created = d.toISOString();\n  salesData.forEach((row, index) => {\n    // Checking if the current row is empty or not. If the row is empty we are ignoring that row.\n    if (row[0]) {\n      processedData.push({\n        id: index + 1,\n        date: row[0],\n        product: row[1],\n        sales_number: row[2],\n        revenue: row[3],\n        user_id: row[4],\n      });\n    }\n  });\n  return processedData;\n};\n\n/**\n * Sort sales data by user defined sort key.\n * @param {array} saleData\n * @param {string} sortByKey\n */\nexport const sortSaleData = (saleData, sortByKey) => {\n  const sortedData = saleData.sort((saleDataA, saleDataB) => {\n    if (sortByKey === \"product\") {\n      if (saleDataA[sortByKey] > saleDataB[sortByKey]) return 1;\n      else if (saleDataA[sortByKey] < saleDataB[sortByKey]) return -1;\n      return 0;\n    } else if (sortByKey === \"date\") {\n      const dateA = new Date(saleDataA[sortByKey]);\n      const dateB = new Date(saleDataB[sortByKey]);\n\n      if (isBefore(dateA, dateB)) return -1;\n      else if (!isBefore(dateA, dateB)) return 1;\n      return 0;\n    }\n    return Number(saleDataA[sortByKey]) - Number(saleDataB[sortByKey]);\n  });\n\n  return sortedData;\n};\n\n/**\n * Find the most revenue earning product.\n * @param {array} saleData\n */\nexport const getMostRevenueEarningProduct = (saleData) => {\n  let maximumRevenueEarningProduct = {\n    name: \"\",\n    revenue: 0,\n  };\n\n  let revenuePerProduct = {};\n  saleData.forEach((item) => {\n    if (!revenuePerProduct.hasOwnProperty(item.product)) {\n      revenuePerProduct[item.product] = 0;\n    }\n    revenuePerProduct[item.product] += Number(item.revenue);\n    if (\n      revenuePerProduct[item.product] > maximumRevenueEarningProduct.revenue\n    ) {\n      maximumRevenueEarningProduct.name = item.product;\n      maximumRevenueEarningProduct.revenue = revenuePerProduct[item.product];\n    }\n  });\n\n  return maximumRevenueEarningProduct;\n};\n\n/**\n * Find the most sold product from the given saleData\n * @param {array} saleData\n */\nexport const getMostSoldProduct = (saleData) => {\n  let mostSoldProduct = {\n    name: \"\",\n    count: 1,\n  };\n\n  let sellCountPerProduct = {};\n  saleData.forEach((item) => {\n    if (!sellCountPerProduct.hasOwnProperty(item.product)) {\n      sellCountPerProduct[item.product] = 0;\n    }\n    sellCountPerProduct[item.product] += Number(item.sales_number);\n    if (sellCountPerProduct[item.product] > mostSoldProduct.count) {\n      mostSoldProduct.name = item.product;\n      mostSoldProduct.count = sellCountPerProduct[item.product];\n    }\n  });\n  return mostSoldProduct;\n};\n\n/**\n * Calculate the average revenue for the given saleData\n * @param {array} saleData\n */\nexport const getAverageSale = (saleData) => {\n  const totalRevenue = saleData.reduce(\n    (revenue, curr) => (revenue += Number(curr.revenue)),\n    0\n  );\n  return totalRevenue / saleData.length;\n};\n\n/**\n * Find the most expensive product from the saleData.\n * @param {array} saleData\n */\nexport const getMostExpensiveProduct = (saleData) => {\n  return saleData.reduce((prev, curr, index) => {\n    const prevRev = Number(prev.revenue);\n    const currRev = Number(curr.revenue);\n    if (index === 0 || prevRev < currRev) {\n      prev = curr;\n    }\n    return prev;\n  }, {});\n};\n\n/**\n * Checks if given name has atleast first name and last name part.\n * @param {string} name \n */\nexport const isValidName = (name) => {\n  if (!name) return false;\n  const splittedName = name.split(\" \");\n  return splittedName.length >= 2 && splittedName.filter(item => item !== '').length === splittedName.length;\n};\n\n/**\n * Check if given email address is valid.\n * @param {string} email \n */\nexport const isValidEmail = (email) => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\n","import axios from \"axios\";\n\nconst defaultOptions = {\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  xsrfHeaderName: \"X-CSRFToken\",\n  xsrfCookieName: \"csrftoken\",\n};\n\nconst instance = axios.create(defaultOptions);\n\nexport const setAuthToken = (token) => {\n    if (token) {\n      //applying token\n      instance.defaults.headers.common[\"Authorization\"] = `Token ${token}`;\n    } else {\n      //deleting the token from header\n      delete instance.defaults.headers.common[\"Authorization\"];\n    }\n  };\n  \nexport default instance;","import React, { useEffect, useState } from \"react\";\nimport { Button, Container, Grid, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { isValidEmail } from \"../utils/helpers\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { isValid } from \"date-fns\";\nimport { loginService } from \"../services/auth.service\";\nimport { setAuthToken } from \"../api/axios.instance\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(3),\n  },\n}));\n\nconst LoginPage = ({ setToken, setCurrentUserId }) => {\n  const classes = useStyles();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [hasError, setHasError] = useState(false);\n\n  const onSubmitForm = (e) => {\n    e.preventDefault();\n    if (!email || !password) {\n      setHasError(true);\n      return;\n    }\n\n    const loginData = {\n      email,\n      password,\n    };\n    loginService(loginData)\n      .then((response) => {\n        if (response.status === 200) {\n          const authToken = response.data.token;\n          const currentUserId = response.data.user_id;\n          if (!authToken) {\n            toast.error(\"Email and/or password doesn't match\");\n            return;\n          }\n          setAuthToken(authToken);\n          setToken(authToken);\n          setCurrentUserId(currentUserId);\n          localStorage.setItem(\"authToken\", authToken);\n          localStorage.setItem(\"currentUserId\", currentUserId);\n        }\n      })\n      .catch((e) => {\n        toast.error(e.toString());\n      });\n  };\n  return (\n    <Container className={classes.container} maxWidth=\"xs\">\n      <form>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  error={\n                    (hasError && !email) || (email && !isValidEmail(email))\n                  }\n                  helperText={\n                    hasError && !email\n                      ? \"Email can not be empty\"\n                      : email && !isValidEmail(email)\n                      ? \"Please insert valid email address\"\n                      : \"\"\n                  }\n                  fullWidth\n                  label=\"Email\"\n                  name=\"email\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  error={hasError && !password}\n                  helperText={\n                    hasError && !password ? \"Password can not be empty\" : null\n                  }\n                  fullWidth\n                  label=\"Password\"\n                  name=\"password\"\n                  size=\"small\"\n                  type=\"password\"\n                  variant=\"outlined\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Button\n              color=\"secondary\"\n              fullWidth\n              type=\"submit\"\n              variant=\"contained\"\n              onClick={onSubmitForm}\n            >\n              Log in\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n      <ToastContainer />\n    </Container>\n  );\n};\n\nexport default LoginPage;\n","import axios from \"../api/axios.instance\";\n\nexport const loginService = (data) => {\n  return axios.post(\"/api/v1/login\", data);\n};\n\nexport const logoutService = () => {\n  return axios.get(\"/api/v1/logout\");\n};\n","import { makeStyles } from '@material-ui/core/styles'\nconst drawerWidth = 240\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tdisplay: 'flex',\n\t},\n\ttoolbar: {\n\t\tpaddingRight: 24, // keep right padding when drawer closed\n\t},\n\ttoolbarIcon: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'flex-end',\n\t\tpadding: '0 8px',\n\t\t...theme.mixins.toolbar,\n\t},\n\tappBar: {\n\t\tzIndex: theme.zIndex.drawer + 1,\n\t\ttransition: theme.transitions.create(['width', 'margin'], {\n\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\tduration: theme.transitions.duration.leavingScreen,\n\t\t}),\n\t},\n\tappBarShift: {\n\t\tmarginLeft: drawerWidth,\n\t\twidth: `calc(100% - ${drawerWidth}px)`,\n\t\ttransition: theme.transitions.create(['width', 'margin'], {\n\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\tduration: theme.transitions.duration.enteringScreen,\n\t\t}),\n\t},\n\tmenuButton: {\n\t\tmarginRight: 36,\n\t},\n\tmenuButtonHidden: {\n\t\tdisplay: 'none',\n\t},\n\ttitle: {\n\t\tflexGrow: 1,\n\t},\n\tdrawerPaper: {\n\t\tposition: 'relative',\n\t\twhiteSpace: 'nowrap',\n\t\twidth: drawerWidth,\n\t\ttransition: theme.transitions.create('width', {\n\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\tduration: theme.transitions.duration.enteringScreen,\n\t\t}),\n\t},\n\tdrawerPaperClose: {\n\t\toverflowX: 'hidden',\n\t\ttransition: theme.transitions.create('width', {\n\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\tduration: theme.transitions.duration.leavingScreen,\n\t\t}),\n\t\twidth: theme.spacing(7),\n\t\t[theme.breakpoints.up('sm')]: {\n\t\t\twidth: theme.spacing(9),\n\t\t},\n\t},\n\tappBarSpacer: theme.mixins.toolbar,\n\tcontent: {\n\t\tflexGrow: 1,\n\t\theight: '100vh',\n\t\toverflow: 'auto',\n\t},\n\tcontainer: {\n\t\tpaddingTop: theme.spacing(4),\n\t\tpaddingBottom: theme.spacing(4),\n\t},\n\tpaper: {\n\t\tpadding: theme.spacing(2),\n\t\tdisplay: 'flex',\n\t\toverflow: 'auto',\n\t\tflexDirection: 'column',\n\t},\n\tfixedHeight: {\n\t\theight: 240,\n\t},\n\tformControl: {\n\t\tmargin: theme.spacing(1),\n\t\tminWidth: 120,\n\t\twidth: '100%',\n\t},\n\tselectEmpty: {\n\t\tmarginTop: theme.spacing(2),\n\t},\n\tcontrol: {\n\t\tpadding: theme.spacing(2),\n\t},\n}))\n\nexport default useStyles\n","export default [\n  {\n    id: 1,\n    email: \"sabbir@alam.com\",\n    password: \"123456\",\n  },\n  {\n    id: 2,\n    email: \"shabnam@mushrit.com\",\n    password: \"123456\",\n  },\n  {\n    id: 3,\n    email: \"sakib@alam.com\",\n    password: \"123456\",\n  },\n  {\n    id: 4,\n    email: \"akter@saima.com\",\n    password: \"123456\",\n  },\n];\n","import userData from \"../api/user\";\nimport {\n  getMostExpensiveProduct,\n  getMostRevenueEarningProduct,\n  getMostSoldProduct,\n  getAverageSale,\n} from \"./helpers\";\n\n/**\n * Mock API for getting authentication token if we find a match for the given email and password in the mock user data.\n * @param {string} email\n * @param {string} password\n */\nexport const getAuthToken = (email, password, users) => {\n  const currentUser = userData.find(\n    (item) => item.email === email && item.password === password\n  );\n  if (currentUser?.authToken) {\n    localStorage.setItem(\"authToken\", currentUser.authToken);\n    localStorage.setItem(\"currentUserId\", currentUser.id);\n    return currentUser.authToken;\n  }\n  return null;\n};\n\n/**\n * Logout procedure and cleaning up localStorage.\n */\nexport const logout = () => {\n  localStorage.removeItem(\"authToken\");\n  localStorage.removeItem(\"currentUserId\");\n  localStorage.removeItem(\"currentUserInformation\");\n  localStorage.removeItem('salesData');\n};\n\n/**\n * Mock API for current user information.\n */\nexport const getCurrentUserInformation = () => {\n  return JSON.parse(localStorage.getItem(\"currentUserInformation\"));\n};\n\n/**\n * Save user information in localStorage.\n * @param {object} userInformation\n */\nexport const saveUserInformation = (userInformation) => {\n  return localStorage.setItem(\n    \"currentUserInformation\",\n    JSON.stringify({\n      ...userInformation,\n      userId: localStorage.getItem(\"currentUserId\"),\n    })\n  );\n};\n\n/**\n * Saves saleData in the localStorage\n * @param {array} salesData\n */\nexport const saveSalesData = (salesData) => {\n  localStorage.setItem(\"salesData\", JSON.stringify(salesData));\n};\n\n/**\n * Get saleData from the localStorage\n */\nexport const getSalesData = () => {\n  const salesDataStr = localStorage.getItem(\"salesData\");\n  console.log(\"salesDataStr\", salesDataStr);\n  if (salesDataStr) {\n    return JSON.parse(salesDataStr);\n  }\n  return [];\n};\n\n/**\n * Generate the aggregated data for showing in the statistics table.\n */\nexport const getAggregatedData = () => {\n  const currentUserId = localStorage.getItem(\"currentUserId\");\n  const salesData = getSalesData();\n  const currentUserSalesData = salesData.filter(\n    (item) => item.userId === currentUserId\n  );\n  return {\n    avgSaleCurrentUser: getAverageSale(currentUserSalesData),\n    avgSale: getAverageSale(salesData),\n    mostExpensiveProduct: getMostExpensiveProduct(currentUserSalesData),\n    mostRevenueEarningProduct: getMostRevenueEarningProduct(\n      currentUserSalesData\n    ),\n    mostSoldProduct: getMostSoldProduct(currentUserSalesData),\n  };\n};\n\nexport const generateToken = (max) => {\n  var s = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  var n = s.length-1;\n  var token = '';\n  for (var i = 0; i < max; i++) {\n      token += s.charAt(Math.floor(Math.random() * n));\n  }\n  return token;\n}\n","export const countries = ['Russia', 'UK', 'Ukrain']\n\nexport const cities = {\n\tRussia: [\n\t\t'Novosibirsk',\n\t\t'Nizhny Novgorod',\n\t\t'Samara',\n\t\t'Omsk',\n\t\t'Kazan',\n\t\t'Ufa',\n\t\t'Chelyabinsk',\n\t],\n\tUK: ['LONDON', 'Birmingham', 'Leeds', 'Glasgow', 'Sheffield', ''],\n\tUkrain: [\n\t\t'Mykolaiv',\n\t\t'Kryvy Rig\t',\n\t\t'Zaporozhye',\n\t\t'Odessa',\n\t\t'Donetsk',\n\t\t'Dnepropetrovsk',\n\t\t'Kharkov',\n\t\t'KIEV',\n\t],\n}\n\nexport const genders = ['male', 'female']\n\nexport const chartFilters = ['sales_number', 'revenue']; \n\nexport const sortKeys = ['date', 'product', 'sales_number', 'revenue'];\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\n\nexport default function AlertDialog(props) {\n\treturn (\n\t\t<div>\n\t\t\t<Dialog\n\t\t\t\topen={props.openDialog}\n\t\t\t\tonClose={props.handleCloseDialog}\n\t\t\t\taria-labelledby='alert-dialog-title'\n\t\t\t\taria-describedby='alert-dialog-description'\n\t\t\t>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<DialogContentText id='alert-dialog-description'>\n\t\t\t\t\t\tAre you sure you want to replace the data\n\t\t\t\t\t</DialogContentText>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button onClick={props.handleCloseDialog} color='primary'>\n\t\t\t\t\t\tNo\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button onClick={props.handleAccept} color='primary' autoFocus>\n\t\t\t\t\t\tYes\n\t\t\t\t\t</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t</div>\n\t)\n}\n","import React, { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Select from \"@material-ui/core/Select\";\nimport Grid from \"@material-ui/core/Grid\";\nimport useStyles from \"../layout/Style\";\nimport { Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n  preProcessData,\n  sortSaleData,\n  isValidEmail,\n  isValidName,\n} from \"../utils/helpers\";\nimport { countries, cities, genders, sortKeys } from \"../data\";\nimport Papa from \"papaparse\";\nimport {\n  getCurrentUserInformation,\n  saveUserInformation,\n  saveSalesData,\n} from \"../utils/mockApiHelper\";\nimport Dialog from \"./Dialog\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { isValid } from \"date-fns\";\nimport { updateUserService } from \"../services/user.service\";\nimport { createSalesRecordService } from \"../services/sales.service\";\nimport { DashboardContext } from \"../pages/Dashboard\";\nimport { MainContext } from \"../components/Main\";\n\nconst InputPage = ({\n  setShowoutput,\n  setcsvData,\n  userInformation,\n  setUserInformation,\n  countryList,\n}) => {\n  const dashboardContext = React.useContext(DashboardContext);\n  const mainContext = React.useContext(MainContext);\n  const { logoutProcess } = dashboardContext;\n  const {\n    name,\n    setName,\n    email,\n    setEmail,\n    age,\n    setAge,\n    gender,\n    setGender,\n    city,\n    setCity,\n    country,\n    setCountry,\n  } = mainContext;\n  const classes = useStyles();\n  const [file, setFile] = useState();\n  const [rawData, setRawData] = useState();\n  const [openDialog, setOpenDialog] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [hasUpdatedUserInformation, setHasUpdatedUserInformation] = useState(\n    false\n  );\n\n  useEffect(() => {\n    const userInformationIsNotBlankObject =\n      Object.keys(userInformation).length > 0 &&\n      userInformation.constructor === Object;\n    if (userInformationIsNotBlankObject) {\n      setName(`${userInformation.first_name} ${userInformation.last_name}`);\n      setAge(userInformation.age);\n      setEmail(userInformation.email);\n      setGender(userInformation.gender);\n    }\n  }, [setName, setAge, setEmail, setGender, userInformation]);\n\n  useEffect(() => {\n    if (userInformation.country && countryList.length > 0)\n      setCountry(\n        countryList.filter(\n          (country) => country.id === userInformation.country\n        )[0]\n      );\n  }, [setCountry, userInformation, countryList]);\n\n  useEffect(() => {\n    if (userInformation.city && country && country.cities)\n      setCity(\n        country.cities.filter((city) => city.id === userInformation.city)[0]\n      );\n  }, [setCity, userInformation, country]);\n\n  const uploadBtnEnabled =\n    !!name &&\n    !!email &&\n    !!age &&\n    !!gender &&\n    !!city &&\n    !!country &&\n    hasUpdatedUserInformation &&\n    !!rawData;\n\n  const handleReset = () => {\n    setName(\"\");\n    setEmail(\"\");\n    setAge(\"\");\n    setGender(\"\");\n    setCity(\"\");\n    setCountry(\"\");\n    setFile();\n    setShowoutput(false);\n    setcsvData();\n    setRawData();\n    setHasError(false);\n    saveUserInformation({});\n    saveSalesData([]);\n    setHasUpdatedUserInformation(false);\n  };\n\n  const handleUpdateUserInformation = () => {\n    const canUpdateInformation = name && email && gender && country && city;\n    if (!canUpdateInformation) {\n      toast.error(\"Please fill up the required fields\");\n      setHasError(true);\n      return;\n    }\n\n    const nameArray = name.split(\" \");\n\n    const updateUserData = {\n      email,\n      first_name: nameArray[0],\n      last_name: nameArray[1],\n      gender,\n      age,\n      country: country.id,\n      city: city.id,\n    };\n\n    setUserInformation((currentValue) => {\n      return { ...currentValue, ...updateUserData };\n    });\n\n    updateUserService(localStorage.getItem(\"currentUserId\"), updateUserData)\n      .then((response) => {\n        if (response.status === 200) {\n          setHasError(false);\n          setHasUpdatedUserInformation(true);\n          toast.success(\"Successfully updated user information\");\n        }\n      })\n      .catch((e) => toast.error(e.toString()));\n  };\n\n  /**\n   * Converts the parsed array data from csv file to csv string, and display set rawData prop to display\n   * it in Manual CSV Data input field\n   *\n   * @param {array} data - parsed array of objects from csv file\n   */\n  const updateData = (data) => {\n    const csv = Papa.unparse(data.data);\n    console.log(\"updateData csv\", csv);\n    setRawData(csv);\n  };\n\n  /**\n   * Checks if data is already available in Manual CSV Data input field\n   * if available, then open confirmation dialog and ask user for confirmation to replace data\n   * If not available, then call handleCSVUpload to prepare data for chart and table\n   */\n  const confirmUpload = () => {\n    if (!!rawData) {\n      setOpenDialog(true);\n    } else {\n      handleCSVUpload();\n    }\n  };\n\n  /**\n   * Validate the uploaded file type, if it's not in text/csv format, then display error\n   * If file is valid, parse the file and execute callback function\n   */\n  const handleCSVUpload = () => {\n    console.log(\"handleCSVUpload called\");\n    if (!!file && (file.name.endsWith(\".csv\") || file.type === \"text/csv\")) {\n      Papa.parse(file, {\n        complete: updateData,\n      });\n    } else {\n      toast.error(\"Please upload valid csv file\");\n    }\n    setOpenDialog(false);\n  };\n\n  /**\n   * This function actully parse the final data used to show table and charts in output screen\n   * Check if rawData (comma seprated string) exists, if yes then convert it to array and call showOutPut function\n   */\n  const handleSubmit = () => {\n    console.log(\"handleSubmit rawData\", rawData);\n    if (!!rawData) {\n      const createSalesRecordData = {\n        sales_data: rawData,\n      };\n      Papa.parse(rawData, {\n        complete: onShowOutPut,\n      });\n    }\n  };\n\n  /**\n   * Set csvData prop and shows the ocountriesutput page\n   */\n  const onShowOutPut = (data) => {\n    data.data.shift();\n    console.log(\"data.data\", data.data);\n    const sales_data = sortSaleData(preProcessData(data.data), sortKeys[0]);\n\n    console.log(\"sales_data\", sales_data);\n    // fetch(\"/api/sales\", {\n    //   method: \"post\",\n    //   body: JSON.stringify(sales_data),\n    // })\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(\"data.sales\", data.sales);\n    //     saveSalesData(data.sales); // saving sales data in local storage using mock API call.\n    //     setShowoutput(true);\n    //     // toast.success(\"Successfully updated user information\");\n    //   })\n    //   .catch((err) => console.log(err));\n\n    const createSalesRecordData = {\n      sales_data,\n    };\n    createSalesRecordService(createSalesRecordData)\n      .then((response) => {\n        if (response.status === 200 || response.status === 201) {\n          toast.success(\"Successfully created sales record\");\n          setShowoutput(true);\n        }\n      })\n      .catch((e) => toast.error(e.toString()));\n  };\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid item xs={12} style={{ textAlign: \"right\" }}>\n          <Button\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"secondary\"\n            onClick={() => {\n              logoutProcess();\n            }}\n          >\n            Logout\n          </Button>\n        </Grid>\n      </Grid>\n      <Typography variant=\"h6\">User</Typography>\n      <Grid container spacing={3} alignItems={\"center\"}>\n        <Grid item xs={6}>\n          <TextField\n            error={(hasError && !name) || (name && !isValidName(name))}\n            helperText={\n              !name && hasError\n                ? \"Name can not be empty\"\n                : name && !isValidName(name)\n                ? \"Name should have first name and last name\"\n                : \"\"\n            }\n            id=\"name\"\n            label=\"Name\"\n            variant=\"outlined\"\n            fullWidth={true}\n            onChange={(event) => {\n              setName(event.target.value);\n            }}\n            value={name}\n          />\n        </Grid>\n        <Grid item xs={3}>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">\n              Gender\n            </InputLabel>\n            <Select\n              error={hasError && !gender}\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={gender}\n              onChange={(event) => {\n                setGender(event.target.value);\n              }}\n              label=\"Gender\"\n            >\n              {genders.map((item, index) => (\n                <MenuItem value={item} key={item} selected={item === gender}>\n                  {item.charAt(0).toUpperCase() + item.slice(1)}\n                </MenuItem>\n              ))}\n            </Select>\n            {!gender && hasError && (\n              <FormHelperText error>Gender can not be empty</FormHelperText>\n            )}\n          </FormControl>\n        </Grid>\n        <Grid item xs={3}>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">Age</InputLabel>\n            <Select\n              error={hasError && !age}\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={age}\n              onChange={(event) => {\n                setAge(event.target.value);\n              }}\n              label=\"Age\"\n            >\n              {[...Array(121)].map((elementInArray, index) => (\n                <MenuItem value={index} key={index}>\n                  {index}\n                </MenuItem>\n              ))}\n            </Select>\n            {!age && hasError && (\n              <FormHelperText error>Age can not be empty</FormHelperText>\n            )}\n          </FormControl>\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            error={(hasError && !email) || (email && !isValidEmail(email))}\n            helperText={\n              !email && hasError\n                ? \"Email can not be empty\"\n                : email && !isValidEmail(email)\n                ? \"Please insert a valid email address.\"\n                : \"\"\n            }\n            id=\"email\"\n            label=\"Email\"\n            variant=\"outlined\"\n            fullWidth={true}\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n            }}\n          />\n        </Grid>\n        <Grid item xs={3}>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">\n              Country\n            </InputLabel>\n            <Select\n              error={hasError && !country}\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={country}\n              onChange={(event) => {\n                setCountry(event.target.value);\n              }}\n              label=\"Country\"\n            >\n              {countryList.map((country) => (\n                <MenuItem value={country} key={country.name}>\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n            {!country && hasError && (\n              <FormHelperText error>Country can not be empty</FormHelperText>\n            )}\n          </FormControl>\n        </Grid>\n        <Grid item xs={3}>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">City</InputLabel>\n            <Select\n              error={hasError && !city}\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={city}\n              onChange={(event) => {\n                setCity(event.target.value);\n              }}\n              label=\"City\"\n              disabled={country === undefined || country.cities === undefined}\n            >\n              {country !== undefined &&\n                country.cities !== undefined &&\n                country.cities.map((city) => (\n                  <MenuItem value={city} key={city.name}>\n                    {city.name}\n                  </MenuItem>\n                ))}\n            </Select>\n            {!city && hasError && (\n              <FormHelperText error>City can not be empty</FormHelperText>\n            )}\n          </FormControl>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        <Grid item xs={12} style={{ textAlign: \"left\" }}>\n          <Button\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"secondary\"\n            onClick={handleUpdateUserInformation}\n          >\n            Update User Data\n          </Button>\n        </Grid>\n      </Grid>\n      <br />\n      <Typography variant=\"h6\">Input Data</Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={10}>\n          <TextField\n            id=\"name\"\n            variant=\"outlined\"\n            type=\"file\"\n            fullWidth={true}\n            onChange={(event) => {\n              console.log(\"event.target.files\", event.target.files);\n              setFile(event.target.files[0]);\n            }}\n            accept=\"csv\"\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            color=\"primary\"\n            className={classes.margin}\n            style={{\n              float: \"right\",\n              height: 55,\n              width: \"100%\",\n            }}\n            onClick={confirmUpload}\n            disabled={!file}\n          >\n            Upload File\n          </Button>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            label=\"Manual CSV Data Input\"\n            multiline\n            rows={10}\n            variant=\"outlined\"\n            rowsMax={10}\n            fullWidth={true}\n            onChange={(event) => {\n              setRawData(event.target.value);\n            }}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            value={rawData}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <Button\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"primary\"\n            className={classes.margin}\n            disabled={!uploadBtnEnabled}\n            style={{ marginRight: 20 }}\n            onClick={handleSubmit}\n          >\n            Upload\n          </Button>\n          <Button\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"secondary\"\n            onClick={handleReset}\n          >\n            Reset\n          </Button>\n        </Grid>\n      </Grid>\n      <Dialog\n        openDialog={openDialog}\n        handleCloseDialog={() => {\n          setOpenDialog(false);\n        }}\n        handleAccept={handleCSVUpload}\n      />\n      <ToastContainer />\n    </>\n  );\n};\nexport default InputPage;\n","import axios from \"../api/axios.instance\";\n\nexport const createSalesRecordService = (data) => {\n  return axios.post(\"/api/v1/sales/\", data);\n};\n\nexport const getSalesRecordService = (id) => {\n  return axios.get(`/api/v1/sales/${id}/`);\n};\n\nexport const getSalesListService = () => {\n  return axios.get(\"/api/v1/sales/\");\n};\n\nexport const getSalesStatisticsService = () => {\n  return axios.get(`/api/v1/sale_statistics/`);\n};\n","import axios from \"../api/axios.instance\";\n\nexport const createUserService = (data) => {\n    return axios.post(\"/api/v1/users\", data);\n  };\nexport const getUserRecordService = (id) => {\n    return axios.get(`/api/v1/users/${id}`);\n  };\nexport const updateUserService = (id, data) => {\n  return axios.patch(`/api/v1/users/${id}/`, data);\n}","import React from 'react'\nimport { DataGrid } from '@material-ui/data-grid'\n\nexport default function Output(props) {\n\tconst data = props.data\n\tif (!data || data === undefined) {\n\t\treturn null\n\t}\n\n\tconst columns = [\n\t\t{ field: 'date', headerName: 'Date'},\n\t\t{ field: 'product', headerName: 'Product'},\n\t\t{ field: 'sales_number', headerName: 'Sales Number'},\n\t\t{ field: 'revenue', headerName: 'Revenue'},\n\t];\n\n\treturn (\n\t\t<div style={{ height: 400, width: '100%' }}>\n\t\t\t<DataGrid rows={data} columns={columns} pageSize={5} checkboxSelection />\n\t\t</div>\n\t)\n}\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nconst Chart = (props) => {\n  const data = props.data;\n\n  if (!data || data === undefined) {\n    return null;\n  }\n\n  const labels = data.map((row) => row[\"product\"]);\n\n  const state = {\n    labels: labels,\n    datasets: [\n      {\n        label: props.yAxisLabel,\n        backgroundColor: \"#0000FF\",\n        borderColor: \"rgba(0,0,0,1)\",\n        borderWidth: 2,\n        data: data.map((row) => row[props.yAxisLabel]),\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <Bar\n        data={state}\n        options={{\n          title: {\n            display: true,\n            text: `${props.yAxisLabel} per product`,\n            fontSize: 20,\n          },\n          legend: {\n            display: true,\n            position: \"right\",\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport {\n  Table,\n  TableCell,\n  TableRow,\n  TableContainer,\n  TableHead,\n  TableBody,\n  Paper,\n} from \"@material-ui/core\";\n\nconst StatTable = (props) => {\n  const data = props.data;\n\n  if (!data || data === undefined || Object.keys(data).length === 0) {\n    return null;\n  }\n\n  const columns = [\n    { field: \"avgSaleCurrentUser\", headerName: \"\" },\n    { field: \"avgSale\", headerName: \"\" },\n    { field: \"\", headerName: \"\" },\n    {\n      field: \"mostRevenueEarningProduct\",\n      headerName: \"\",\n    },\n    { field: \"mostSoldProduct\", headerName: \"\" },\n  ];\n\n  return (\n    <div style={{ height: 400, width: \"100%\" }}>\n      <TableContainer component={Paper}>\n        <Table style={{ minWidth: 700 }} aria-label=\"spanning table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Average Sales for Employee</TableCell>\n              <TableCell align=\"center\">Average Sales for All Employees</TableCell>\n              <TableCell align=\"center\">Highest Revenue Sale</TableCell>\n              <TableCell align=\"center\">Highest Revenue Product</TableCell>\n              <TableCell align=\"center\">Highest Selling Product</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <TableCell>\n                <Table component={Paper}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>UserName</TableCell>\n                      <TableCell>Average</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>{props.currentUserName}</TableCell>\n                      <TableCell>{data.avgSaleCurrentUser}</TableCell>\n                    </TableRow>\n                  </TableHead>\n                </Table>\n              </TableCell>\n              <TableCell>\n                <Table component={Paper}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Average</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>{data.avgSale}</TableCell>\n                    </TableRow>\n                  </TableHead>\n                </Table>\n              </TableCell>\n              <TableCell>\n                <Table component={Paper}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Product Name</TableCell>\n                      <TableCell>Revenue</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>{data.mostExpensiveProduct.product}</TableCell>\n                      <TableCell>{Number(data.mostExpensiveProduct.revenue)}</TableCell>\n                    </TableRow>\n                  </TableHead>\n                </Table>\n              </TableCell>\n              <TableCell>\n                <Table component={Paper}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Product Name</TableCell>\n                      <TableCell>Total Revenue</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>{data.mostRevenueEarningProduct.name}</TableCell>\n                      <TableCell>{data.mostRevenueEarningProduct.revenue}</TableCell>\n                    </TableRow>\n                  </TableHead>\n                </Table>\n              </TableCell>\n              <TableCell>\n                <Table component={Paper}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Product Name</TableCell>\n                      <TableCell>Total Sales</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>{data.mostSoldProduct.name}</TableCell>\n                      <TableCell>{data.mostSoldProduct.count}</TableCell>\n                    </TableRow>\n                  </TableHead>\n                </Table>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default StatTable;\n","import React, { useEffect, useState } from \"react\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Grid from \"@material-ui/core/Grid\";\nimport useStyles from \"../layout/Style\";\nimport { Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport { logout } from \"../utils/mockApiHelper\";\nimport {\n  getMostExpensiveProduct,\n  getMostRevenueEarningProduct,\n  getMostSoldProduct,\n  getAverageSale,\n  sortSaleData,\n} from \"../utils/helpers\";\nimport Table from \"./Table\";\nimport Chart from \"./Chart\";\nimport StatTable from \"./StatTable\";\nimport { chartFilters, sortKeys } from \"../data\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport {\n  getSalesListService,\n  getSalesStatisticsService,\n} from \"../services/sales.service\";\nimport { toast } from \"react-toastify\";\nimport { DashboardContext } from \"../pages/Dashboard\";\nimport { MainContext } from \"../components/Main\";\nimport salesData from \"../api/sales_data\";\n\nconst OutputPage = ({ handleReset, userInformation, countryList }) => {\n  const dashboardContext = React.useContext(DashboardContext);\n  const mainContext = React.useContext(MainContext);\n  const { logoutProcess } = dashboardContext;\n  const { name, email, age, gender, city, country } = mainContext;\n  const [aggregatedData, setAggregatedData] = useState({});\n  const classes = useStyles();\n\n  const [csvData, setcsvData] = useState([]);\n  const [chartFilter, setChartFilter] = useState(chartFilters[0]);\n  const [orderBy, setOrderBy] = useState(sortKeys[0]);\n\n  const getAggregatedData = () => {\n    getSalesStatisticsService()\n      .then((response) => {\n        if (response.status === 200) {\n          const salesStatistics = response.data;\n          console.log(\"salesStatistics\", salesStatistics);\n          /**\n           * Expected Response:\n           * {\n           *  \"aggregatedData\":{\n           *       \"avgSaleCurrentUser\": number,\n           *       \"avgSale\": number,\n           *       \"mostExpensiveProduct\":{\n           *         \"userId\": string,\n           *         \"id\": string,\n           *         \"date\": string,\n           *         \"product\": string,\n           *         \"sales_number\": string,\n           *         \"revenue\": string\n           *       },\n           *       \"mostRevenueEarningProduct\":{\n           *         \"name\": string,\n           *         \"revenue\": number\n           *       },\n           *       \"mostSoldProduct\":{\n           *         \"name\": string,\n           *         \"count\": number\n           *       }\n           *   }\n           * }\n           */\n          const parsedData = {\n            avgSaleCurrentUser: salesStatistics.average_sales_for_current_user,\n            avgSale: salesStatistics.average_sale_all_user,\n            mostExpensiveProduct: {\n              product:\n                salesStatistics.product_highest_revenue_for_current_user\n                  .product_name,\n              revenue:\n                salesStatistics.product_highest_revenue_for_current_user.price,\n            },\n            mostRevenueEarningProduct: {\n              name:\n                salesStatistics.highest_revenue_sale_for_current_user.sale_id,\n              revenue:\n                salesStatistics.highest_revenue_sale_for_current_user.revenue,\n            },\n            mostSoldProduct: {\n              name:\n                salesStatistics.product_highest_sales_number_for_current_user\n                  .product_name,\n              count:\n                salesStatistics.product_highest_sales_number_for_current_user\n                  .price,\n            },\n          };\n          setAggregatedData(parsedData);\n        }\n      })\n      .catch((e) => toast.error(e.toString()));\n  };\n\n  const getCsvData = () => {\n    getSalesListService().then((response) => {\n      if (response.status === 200) {\n        setcsvData(response.data);\n      }\n    });\n  };\n\n  useEffect(() => {\n    getAggregatedData();\n    getCsvData();\n\n    /**\n     * Expected response:\n     * {\n     *    sales: {\n     *        date: string\n     *        id: string\n     *        product: string\n     *        revenue: string\n     *        sales_number: string\n     *        userId: string\n     *    }\n     * }\n     */\n    // fetch(\"/api/sales/\" + localStorage.getItem(\"currentUserId\"))\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(data.sales);\n    //     setcsvData([...data.sales]);\n    //   });\n\n    /**\n     * Expected Response:\n     * {\n     *  \"aggregatedData\":{\n     *       \"avgSaleCurrentUser\": number,\n     *       \"avgSale\": number,\n     *       \"mostExpensiveProduct\":{\n     *         \"userId\": string,\n     *         \"id\": string,\n     *         \"date\": string,\n     *         \"product\": string,\n     *         \"sales_number\": string,\n     *         \"revenue\": string\n     *       },\n     *       \"mostRevenueEarningProduct\":{\n     *         \"name\": string,\n     *         \"revenue\": number\n     *       },\n     *       \"mostSoldProduct\":{\n     *         \"name\": string,\n     *         \"count\": number\n     *       }\n     *   }\n     * }\n     */\n    // fetch(\"/api/aggregated_data/\" + localStorage.getItem(\"currentUserId\"))\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     setAggregatedData(data.aggregatedData);\n    //   });\n  }, []);\n\n  useEffect(() => {\n    if (csvData && csvData.length) {\n      const rows = sortSaleData(csvData, orderBy);\n      setcsvData([...rows]);\n    }\n  }, [orderBy]);\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid item xs={12} style={{ textAlign: \"right\" }}>\n          <Button\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"secondary\"\n            onClick={() => {\n              logoutProcess();\n            }}\n          >\n            Logout\n          </Button>\n        </Grid>\n      </Grid>\n      <Typography variant=\"h6\">Personal Information</Typography>\n      <Grid container spacing={8}>\n        <Grid item xs={6}>\n          <Grid container spacing={3}>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"left\", fontWeight: \"bolder\" }}>Name :</p>\n            </Grid>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"right\" }}>{name}</p>\n            </Grid>\n          </Grid>\n          <hr />\n          <Grid container spacing={3}>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"left\", fontWeight: \"bolder\" }}>Age :</p>\n            </Grid>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"right\" }}>{age}</p>\n            </Grid>\n          </Grid>\n          <hr />\n          <Grid container spacing={3}>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"left\", fontWeight: \"bolder\" }}>\n                Gender :\n              </p>\n            </Grid>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"right\" }}>{gender.charAt(0).toUpperCase() + gender.slice(1)}</p>\n            </Grid>\n          </Grid>\n          <hr />\n        </Grid>\n        <Grid item xs={6}>\n          <Grid container spacing={4}>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"left\", fontWeight: \"bolder\" }}>Email :</p>\n            </Grid>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"right\" }}>{email}</p>\n            </Grid>\n          </Grid>\n          <hr />\n          <Grid container spacing={3}>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"left\", fontWeight: \"bolder\" }}>\n                Country :\n              </p>\n            </Grid>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"right\" }}>{country.name}</p>\n            </Grid>\n          </Grid>\n          <hr />\n          <Grid container spacing={3}>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"left\", fontWeight: \"bolder\" }}>City :</p>\n            </Grid>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"right\" }}>{city.name}</p>\n            </Grid>\n          </Grid>\n          <hr />\n        </Grid>\n      </Grid>\n      {csvData.length > 0 && (\n        <Grid container spacing={8}>\n          <Grid item xs={6}>\n            <Grid container xs={12}>\n              <Grid item lg={9}>\n                <Typography variant=\"h6\">Data</Typography>\n              </Grid>\n              <Grid item lg={3}>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                  <InputLabel id=\"demo-simple-select-outlined-label\">\n                    OrderBy\n                  </InputLabel>\n                  <Select\n                    labelId=\"demo-simple-select-outlined-label\"\n                    id=\"demo-simple-select-outlined\"\n                    value={orderBy}\n                    onChange={(event) => {\n                      setOrderBy(event.target.value);\n                    }}\n                    label=\"OrderBy\"\n                  >\n                    {sortKeys.map((item, index) => (\n                      <MenuItem value={item} key={`${index} + ${item}`}>\n                        {item}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n            <Table data={csvData} />\n          </Grid>\n          <Grid item xs={6}>\n            <Grid container xs={12}>\n              <Grid item lg={9}>\n                <Typography variant=\"h6\">Chart</Typography>\n              </Grid>\n              <Grid item lg={3}>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                  <InputLabel id=\"demo-simple-select-outlined-label\">\n                    Y-Axis\n                  </InputLabel>\n                  <Select\n                    labelId=\"demo-simple-select-outlined-label\"\n                    id=\"demo-simple-select-outlined\"\n                    value={chartFilter}\n                    onChange={(event) => {\n                      setChartFilter(event.target.value);\n                    }}\n                    label=\"YAxis\"\n                  >\n                    {chartFilters.map((item, index) => (\n                      <MenuItem value={item} key={index}>\n                        {item}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n            <Chart data={csvData} yAxisLabel={chartFilter} />\n          </Grid>\n        </Grid>\n      )}\n      {aggregatedData && (\n        <Grid container spacing={8}>\n          <Grid item lg={12}>\n            <Typography variant=\"h6\">Statistics Table</Typography>\n          </Grid>\n          <Grid item lg={12}>\n            <Grid container>\n              <StatTable data={aggregatedData} currentUserName={name} />\n            </Grid>\n          </Grid>\n        </Grid>\n      )}\n      <Grid container spacing={3}>\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <Button\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"secondary\"\n            onClick={handleReset}\n          >\n            Reset\n          </Button>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\nexport default OutputPage;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  getCurrentUserInformation,\n  saveUserInformation,\n  saveSalesData,\n  getSalesData,\n} from \"../utils/mockApiHelper\";\nimport InputPage from \"./InputPage\";\nimport OutputPage from \"./OutputPage\";\nimport { getUserRecordService } from \"../services/user.service\";\nimport { getCountryCityListService } from \"../services/country.service\";\nimport { DashboardContext } from \"../pages/Dashboard\";\n\nexport const MainContext = React.createContext({});\n\nconst Main = ({ onLogout }) => {\n  const context = React.useContext(DashboardContext);\n  const { token, setToken, currentUserId, setCurrentUserId } = context;\n\n  const [userInformation, setUserInformation] = useState({});\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n\n  const [salesData, setSalesData] = useState([]);\n  const [countryList, setCountryList] = useState([]);\n  const [showOutput, setShowoutput] = useState(false);\n  const [csvData, setcsvData] = useState([]);\n\n  useEffect(() => {\n    getUserRecordService(currentUserId).then((response) => {\n      if (response.status === 200) {\n        setUserInformation(response.data);\n      }\n    });\n    getCountryCityListService().then((response) => {\n      if (response.status === 200) {\n        setCountryList(response.data);\n        console.log(\"country list\", response.data);\n      }\n    });\n    setSalesData(getSalesData());\n  }, []);\n\n  useEffect(() => {\n    const userInformationIsNotBlankObject =\n      Object.keys(userInformation).length > 0 &&\n      userInformation.constructor === Object;\n    const salesDataIsNotEmpty = salesData.length > 0;\n    if (userInformationIsNotBlankObject && salesDataIsNotEmpty) {\n      setShowoutput(true);\n    }\n  }, [userInformation, salesData]);\n\n  useEffect(() => {\n    const userInformation = getCurrentUserInformation();\n    const salesData = getSalesData();\n    if (salesData && showOutput) {\n      const rows = salesData.filter(\n        (item) => item.userId === userInformation?.userId\n      );\n      setcsvData([...rows]);\n    }\n  }, [showOutput]);\n\n  const handleReset = () => {\n    setShowoutput(false);\n    setcsvData([]);\n    saveUserInformation({});\n    saveSalesData([]);\n  };\n\n  return (\n    <MainContext.Provider\n      value={{\n        name,\n        setName,\n        email,\n        setEmail,\n        age,\n        setAge,\n        gender,\n        setGender,\n        city,\n        setCity,\n        country,\n        setCountry,\n      }}\n    >\n      {!showOutput && (\n        <InputPage\n          setcsvData={setcsvData}\n          setShowoutput={setShowoutput}\n          userInformation={userInformation}\n          setUserInformation={setUserInformation}\n          countryList={countryList}\n        />\n      )}\n      {!!showOutput && (\n        <OutputPage\n          handleReset={handleReset}\n          userInformation={userInformation}\n          countryList={countryList}\n        />\n      )}\n    </MainContext.Provider>\n  );\n};\nexport default Main;\n","import axios from \"../api/axios.instance\";\n\nexport const getCountryCityListService = () => {\n    return axios.get(\"/api/v1/countries\");\n  };","import React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Login from \"./Login\";\nimport useStyles from \"../layout/Style\";\nimport Main from \"../components/Main\";\nimport { belongsTo, createServer, hasMany, Model } from \"miragejs\";\nimport saleData from \"../api/sales_data\";\nimport userData from \"../api/user\";\nimport {\n  getAverageSale,\n  getMostExpensiveProduct,\n  getMostRevenueEarningProduct,\n  getMostSoldProduct,\n} from \"../utils/helpers\";\nimport { generateToken } from \"../utils/mockApiHelper\";\nimport { setAuthToken } from \"../api/axios.instance\";\nimport { logout } from \"../utils/mockApiHelper\";\nimport { logoutService } from \"../services/auth.service\";\nimport { toast } from \"react-toastify\";\n\ncreateServer({\n  models: {\n    user: Model,\n    sale: Model.extend({\n      user: belongsTo(),\n    }),\n    userinformation: Model,\n  },\n\n  seeds(server) {\n    userData.forEach((user) => {\n      server.create(\"user\", user);\n    });\n  },\n\n  routes() {\n    // this.post(\"/api/token\", (schema, request) => {\n    //   var users = schema.users.all().models;\n    //   var data = JSON.parse(request.requestBody);\n\n    //   const user = users.find((item) => {\n    //     return item.email === data.email && item.password === data.password;\n    //   });\n\n    //   if (user && user.password === data.password) {\n    //     var token = generateToken(64);\n    //     return {\n    //       access_token: token,\n    //       token_type: \"Bearer\",\n    //       user_id: user.id,\n    //     };\n    //   } else {\n    //     return Response(\n    //       401,\n    //       {},\n    //       {\n    //         code: 401,\n    //         message: \"Invalid username and/or password, please try again\",\n    //       }\n    //     );\n    //   }\n    // });\n\n    this.post(\"/api/userinformation\", (schema, request) => {\n      const payLoad = JSON.parse(request.requestBody);\n      schema.db.userinformations.insert(payLoad);\n      return { userinformation: payLoad };\n    });\n\n    this.get(\"/api/userinformation/:userId\", (schema, request) => {\n      const currentUserInfo = schema.userinformations\n        .all()\n        .models.find((item) => {\n          return item.userId === request.params.userId;\n        });\n\n      return { userInformation: currentUserInfo };\n    });\n\n    this.post(\"/api/sales\", (schema, request) => {\n      const payLoad = JSON.parse(request.requestBody);\n      schema.db.sales.insert(payLoad);\n      return { sales: payLoad };\n    });\n\n    this.get(\"/api/sales/:userId\", (schema, request) => {\n      const currentUserId = request.params.userId;\n      const salesData = schema.sales.all().models;\n      const currentUserSalesData = salesData.filter(\n        (item) => item.userId === currentUserId\n      );\n      return { sales: currentUserSalesData };\n    });\n\n    this.get(\"/api/aggregated_data/:userId\", (schema, request) => {\n      const currentUserId = request.params.userId;\n      const salesData = schema.sales.all().models;\n      const currentUserSalesData = salesData.filter(\n        (item) => item.userId === currentUserId\n      );\n      return {\n        aggregatedData: {\n          avgSaleCurrentUser: getAverageSale(currentUserSalesData),\n          avgSale: getAverageSale(salesData),\n          mostExpensiveProduct: getMostExpensiveProduct(currentUserSalesData),\n          mostRevenueEarningProduct: getMostRevenueEarningProduct(\n            currentUserSalesData\n          ),\n          mostSoldProduct: getMostSoldProduct(currentUserSalesData),\n        },\n      };\n    });\n\n    this.passthrough();\n    this.passthrough(`http://localhost:8000/**`);\n  },\n});\n\nexport const DashboardContext = React.createContext({});\n\nconst Dashboard = () => {\n  const classes = useStyles();\n  const [token, setToken] = useState(localStorage.getItem(\"authToken\"));\n  const [currentUserId, setCurrentUserId] = useState(\n    localStorage.getItem(\"currentUserId\")\n  );\n  const logoutProcess = () => {\n    logoutService()\n      .then((response) => {\n        logout();\n        setToken(undefined);\n        setAuthToken(undefined);\n      })\n      .catch((e) => {\n        toast.error(e.toString());\n      });\n  };\n\n  if (!token) {\n    return <Login setToken={setToken} setCurrentUserId={setCurrentUserId} />;\n  } else {\n    setAuthToken(token);\n  }\n  return (\n    <DashboardContext.Provider\n      value={{\n        token,\n        setToken,\n        currentUserId,\n        setCurrentUserId,\n        logoutProcess,\n      }}\n    >\n      <Paper className={classes.control}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Main />\n          </Grid>\n        </Grid>\n      </Paper>\n    </DashboardContext.Provider>\n  );\n};\n\nexport default Dashboard;\n","const reportWebVitals = (onPerfEntry) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport clsx from 'clsx'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport useStyles from './Style'\n\nconst Header = () => {\n\tconst classes = useStyles()\n\treturn (\n\t\t<AppBar\n\t\t\tposition='absolute'\n\t\t\tclassName={clsx(classes.appBar)}\n\t\t>\n\t\t\t<Toolbar className={classes.toolbar}>\n\t\t\t\t<Typography\n\t\t\t\t\tcomponent='h1'\n\t\t\t\t\tvariant='h6'\n\t\t\t\t\tcolor='inherit'\n\t\t\t\t\tnoWrap\n\t\t\t\t\tclassName={classes.title}\n\t\t\t\t>\n\t\t\t\t\tReact Web App\n\t\t\t\t</Typography>\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t)\n}\n\nexport default Header\n","import React from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Container from '@material-ui/core/Container'\nimport useStyles from './Style'\nimport Header from './Header'\n\nconst Layout = (props) => {\n\tconst classes = useStyles()\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<CssBaseline />\n\t\t\t<Header />\n\t\t\t<main className={classes.content}>\n\t\t\t\t<div className={classes.appBarSpacer} />\n\t\t\t\t<Container maxWidth='lg' className={classes.container}>\n\t\t\t\t\t{props.children}\n\t\t\t\t</Container>\n\t\t\t</main>\n\t\t</div>\n\t)\n}\n\nexport default Layout\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from '../src/pages/Dashboard'\nimport reportWebVitals from './reportWebVitals'\nimport Layout from './layout/index'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Layout>\n\t\t\t<App />\n\t\t</Layout>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}